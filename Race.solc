pragma solidity ^0.5.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

pragma solidity ^0.5.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), _owner);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

pragma solidity ^0.5.0;

/**
 * @title Roles
 * @dev Library for managing addresses assigned to a Role.
 */
library Roles {
    struct Role {
        mapping (address => bool) bearer;
    }

    /**
     * @dev Give an account access to this role.
     */
    function add(Role storage role, address account) internal {
        require(!has(role, account), "Roles: account already has role");
        role.bearer[account] = true;
    }

    /**
     * @dev Remove an account's access to this role.
     */
    function remove(Role storage role, address account) internal {
        require(has(role, account), "Roles: account does not have role");
        role.bearer[account] = false;
    }

    /**
     * @dev Check if an account has this role.
     * @return bool
     */
    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0), "Roles: account is the zero address");
        return role.bearer[account];
    }
}

pragma solidity ^0.5.0;

contract PauserRole is Context {
    using Roles for Roles.Role;

    event PauserAdded(address indexed account);
    event PauserRemoved(address indexed account);

    Roles.Role private _pausers;

    constructor () internal {
        _addPauser(_msgSender());
    }

    modifier onlyPauser() {
        require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");
        _;
    }

    function isPauser(address account) public view returns (bool) {
        return _pausers.has(account);
    }

    function addPauser(address account) public onlyPauser {
        _addPauser(account);
    }

    function renouncePauser() public {
        _removePauser(_msgSender());
    }

    function _addPauser(address account) internal {
        _pausers.add(account);
        emit PauserAdded(account);
    }

    function _removePauser(address account) internal {
        _pausers.remove(account);
        emit PauserRemoved(account);
    }
}

pragma solidity ^0.5.0;

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
contract Pausable is Context, PauserRole {
    /**
     * @dev Emitted when the pause is triggered by a pauser (`account`).
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by a pauser (`account`).
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state. Assigns the Pauser role
     * to the deployer.
     */
    constructor () internal {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
        require(!_paused, "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     */
    modifier whenPaused() {
        require(_paused, "Pausable: not paused");
        _;
    }

    /**
     * @dev Called by a pauser to pause, triggers stopped state.
     */
    function pause() public onlyPauser whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Called by a pauser to unpause, returns to normal state.
     */
    function unpause() public onlyPauser whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

pragma solidity ^0.5.0;

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * NOTE: This call _does not revert_ if the signature is invalid, or
     * if the signer is otherwise unable to be retrieved. In those scenarios,
     * the zero address is returned.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise)
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        // Check the signature length
        if (signature.length != 65) {
            return (address(0));
        }

        // Divide the signature in r, s and v variables
        bytes32 r;
        bytes32 s;
        uint8 v;

        // ecrecover takes the signature parameters, and the only way to get them
        // currently is to use assembly.
        // solhint-disable-next-line no-inline-assembly
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }

        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return address(0);
        }

        if (v != 27 && v != 28) {
            return address(0);
        }

        // If the signature is valid (and not malleable), return the signer address
        return ecrecover(hash, v, r, s);
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * replicates the behavior of the
     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]
     * JSON-RPC method.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Klaytn Signed Message:\n32", hash));
    }
}

pragma solidity ^0.5.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     *
     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.
     * @dev Get it via `npm install @openzeppelin/contracts@next`.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.

     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.
     * @dev Get it via `npm install @openzeppelin/contracts@next`.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.
     * @dev Get it via `npm install @openzeppelin/contracts@next`.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

pragma solidity ^0.5.0;

/**
 * Validators
 */

contract Validation {
    // Here we check (require) that input address is not empty, else throw exception
    function requireNotEmptyAddress(address value) pure internal
    {
        require(isAddressNotEmpty(value), "Please provide not empty address");
    }

    // Here we check (true/false) that input address is not empty
    function isAddressNotEmpty(address value) pure internal returns (bool result)
    {
        return value != address(0x0);
    }
}

pragma solidity ^0.5.0;

/**
 * Race contract
 */

contract Race is Ownable, Pausable, Validation {
    using ECDSA for bytes32;
    using SafeMath for uint256;

    uint constant rewardMultiplierDivider = 100;

    /**
     * Race reward scheme.
     * Contains information about how reward will be distributed between winners
     *     place - winner place, only for informational purpose
     *     multiplier - multiplier divided by 100, e.g.: 150 = 150 / 100 = 1.5, 200 = 200 / 100 = 2
    */
    struct SchemeReward {
        uint place;
        // fixed point is not currently fully supported by solidity
        // https://solidity.readthedocs.io/en/v0.5.3/types.html#fixed-point-numbers
        uint multiplier;
    }

    /**
     * Race schemes templates
     * Scheme contains players count (exact players amount for each race), bet (exact player race bet in main network currency),
     * rewards information
     *     e.g., suppose what race bet = 1, players count = 3:
     *         #1 place, 150 means that first place then winner will receive x1.5 of race bet = 1.5
     *         #2 place, 100 means that second place then winner will receive x1 of race bet = 1
     *         other place winners will be ignored.
     * Any scheme can be applied to any race.
     * In create method, when we create race state and assign scheme id to the race, we copy all data from scheme to race state.
     * This makes it possible to change schemes without waiting for the completion of all races.
    */
    struct Scheme {
        uint id;
        uint playersCount;
        SchemeReward[] rewards;
    }

    /**
    * Race state.
    * Race logic:
    *     1. Server creates new race.
    *     2. Every player can participate in the race, assigned players count must be equal to race scheme players count.
    *     3. When server decides (server checks amount of assigned players each couple of seconds) to start race it starts.
    *        But if count of assigned players is less than expected count server can cancel the race. After that players can
    *        receive their bets back by calling revokeBet method.
    *     4. Server finishes race, winners take theirs rewards to theirs addresses, we take commission = race total bet - race total reward.
    * Race data:
    *     id - unique race id, race can't be modified after create
    *     bet - accepted bet for one player
    *     startTime - server race start timestamp in seconds
    *     endTime - server race end timestamp, endTime - startTime ~ race duration, everybody on block chain can this information
    *     duration - declared race duration
    *     isStarted - race started flag
    *     isFinished - race finished flag
    *     isCancelled - race cancelled flag
    *     scheme - scheme info what assigned to race
    *     assignedPlayersCount - player count already accepted race with bet
    *     assignedPlayers - mapping indicate than player accept race, for fast lookup
    *     revokedBets - mapping indicate than player revoke his bet, only server can sign this action, and player then can revert his bet
    */
    struct State {
        uint id;
        uint bet;
        uint startTime;
        uint endTime;
        uint duration;
        bool isStarted;
        bool isFinished;
        bool isCancelled;
        Scheme scheme;
        uint assignedPlayersCount;
        mapping(address => bool) assignedPlayers;
        mapping(address => bool) revokedBets;
    }

    /**
    * Races states
    * Mapping of race id to state
    */
    mapping(uint => State) private _states;

    /**
    * Schemes
    * mapping of race scheme id to scheme
    */
    mapping(uint => Scheme) private _schemes;

    /* Destination wallet that aggregate commission = race total bet - race reward */
    address payable private _destinationWallet;

    /**
    * Contract events
    *     PlayerBetPlaced - bet placed event, server can filter events for race id and player address
    *     PlayerBetPlaced - bet revoked event, server can filter events for race id and player address
    */
    event PlayerBetPlaced(uint indexed raceId, address indexed playerAddress);
    event PlayerBetRevoked(uint indexed raceId, address indexed playerAddress);


    /** Create race logic
     *  Duration in seconds
     *
     *  !!!Attention: _bet must bet set in peb, 10^18 peb = 1 KLAY
    */
    function create(uint _raceId, uint _bet, uint _duration, uint _schemeId) external
        onlyOwner
        whenNotPaused
    {
        require(_raceId != 0, "Race id must not be zero");
        require(_bet != 0, "Bid must not be zero");
        require(_duration != 0, "Duration must not be zero");
        require(_schemeId != 0, "Scheme id must not be zero");

        // copy data from provided scheme by id, state must copy data from scheme, otherwise we can get unexpected behaviour when finish race
        Scheme memory scheme = _schemes[_schemeId];

        require(scheme.id == _schemeId, "Invalid scheme id was provided");

        // create new state and set initial
        State storage state = _states[_raceId];
        require(state.id == 0, "Race already created");

        state.id = _raceId;
        state.duration = _duration;
        state.bet = _bet;

        // workaround for copying memory array
        // Error: CompileError: UnimplementedFeatureError: Copying of type struct Race.SchemeReward memory[] memory to storage not yet supported.
        state.scheme.id = scheme.id;
        state.scheme.playersCount = scheme.playersCount;

        // copy rewards info
        for(uint schemeRewardIndex = 0; schemeRewardIndex < scheme.rewards.length; schemeRewardIndex++){
            state.scheme.rewards.push(scheme.rewards[schemeRewardIndex]);
        }
    }

    /** Start race logic
     *  _time - timestamp in seconds
    */
    function start(uint _raceId, uint _time) external
        onlyOwner
        whenNotPaused
        validRaceId(_raceId)
        validRacePlayersCount(_raceId)
        whenRaceIsNotStarted(_raceId)
    {
        require(_raceId != 0, "Race id must not be zero");
        require(_time != 0, "Start time must not be zero");

        State storage state = _states[_raceId];

        state.startTime = _time;
        state.isStarted = true;
    }

    /** Race bet logic
     * Currently controlled by server, but in future this logic can be called by client application (web or something else)
     * We check that input data signed by server
     *     _raceId - race id generated by server
     *     _signature - server hash signature of player address, race id and bet amount
    */
    function bet(uint _raceId, bytes calldata _signature) external payable
        whenNotPaused
        validRaceId(_raceId)
        whenRaceIsNotStarted(_raceId)
        whenRaceIsNotCancelled(_raceId)
    {
        // msg.value - player bet
        // msg.sender - player address

        // protect from zero bet
        require(msg.value != 0, "Invalid bid amount");
        require(_raceId != 0, "Race id must not be zero");

        // hash contains player address and race id
        bytes32 validatingHash = keccak256(abi.encodePacked(msg.sender, _raceId, msg.value));

        // server must by signer
        address addressRecovered = validatingHash.toEthSignedMessageHash().recover(_signature);

        require(addressRecovered == owner(), "Only owner can sign data");

        State storage state = _states[_raceId];

        // increment assigned players count for race
        state.assignedPlayersCount++;

        require(state.assignedPlayersCount <= state.scheme.playersCount, "Players queque is full");
        require(msg.value == state.bet, "Incorrect bid amount");
        require(!state.assignedPlayers[msg.sender], "Bid is already set");

        // store that player make a bet
        state.assignedPlayers[msg.sender] = true;

        emit PlayerBetPlaced(_raceId, msg.sender);
    }

    /** Race finish logic
     *     _raceId - race id generated by server
     *     _time - timestamp in seconds, every blockchain user can compare that endTime - startTime ~ duration
     *     _winners - array of winners ordered by place
    */
    function finish(uint _raceId, uint _time, address payable[] calldata _winners) external
        onlyOwner
        whenNotPaused
        validRaceId(_raceId)
        validDestinationWallet
        whenRaceIsStarted(_raceId)
        whenRaceIsNotFinished(_raceId)
        whenRaceIsNotCancelled(_raceId)
    {
        require(_raceId != 0, "Race id must not be zero");
        require(_winners.length != 0, "Winners length must be greater than zero");

        State storage state = _states[_raceId];

        uint racePlayersCount = state.scheme.playersCount;
        uint raceBetForOnePlayer = state.bet;

        uint totalBet = racePlayersCount.mul(raceBetForOnePlayer);
        uint totalReward = 0;

        // commission = total race bet - total reward
        uint commission = 0;

        for(uint placeIndex = 0; placeIndex < state.scheme.rewards.length; placeIndex++)
        {
            uint reward = raceBetForOnePlayer.mul(state.scheme.rewards[placeIndex].multiplier).div(rewardMultiplierDivider);

            _winners[placeIndex].transfer(reward);

            totalReward = totalReward.add(reward);
        }

        require(totalReward < totalBet, "Total race reward must be less than race total amount of bids");

        commission = totalBet.sub(totalReward);

        state.endTime = _time;
        state.isFinished= true;

        // transfer commission to destination wallet
        _destinationWallet.transfer(commission);
    }

    /** Race cancel logic
     *
    */
    function cancel(uint _raceId) external
        onlyOwner
        whenNotPaused
        validRaceId(_raceId)
        whenRaceIsNotStarted(_raceId)
        whenRaceIsNotCancelled(_raceId)
    {
        require(_raceId != 0, "Race id must not be zero");

        State storage state = _states[_raceId];

        state.isCancelled = true;
    }

    /** Race player revoke bet logic
     *      _signature - server hash signature of player address and race id
     *  Player can call this method only when race is cancelled and only once
    */
    function revokeBet(uint _raceId, bytes calldata _signature) external
        whenNotPaused
        validRaceId(_raceId)
        whenRaceIsCancelled(_raceId)
    {
        require(_raceId != 0, "Race id must not be zero");

        State storage state = _states[_raceId];

        // msg.sender - player address

        // hash contains player address and race id
        bytes32 validatingHash = keccak256(abi.encodePacked(msg.sender, _raceId));

        // server must be the signer
        address addressRecovered = validatingHash.toEthSignedMessageHash().recover(_signature);

        require(addressRecovered == owner(), "Only the owner can sign data");

        require(!state.revokedBets[msg.sender], "You already revoked your bid");

        state.revokedBets[msg.sender] = true;

        // transfers bet back to player
        msg.sender.transfer(state.bet);

        emit PlayerBetRevoked(_raceId, msg.sender);
    }

    /** Set scheme logic
     *      _schemeId - any not zero id
     *      _playersCount - players count to start race
     *      _rewards - array of uint multiplied by rewardMultiplierDivider
    */
    function setScheme(uint _schemeId, uint _playersCount, uint[] calldata _rewards) external
        onlyOwner
    {
        require(_schemeId != 0, "Scheme id must not be zero");
        require(_playersCount != 0, "Players count must be greater than zero");
        require(_rewards.length != 0, "Please provide correct rewards information");

        Scheme storage scheme = _schemes[_schemeId];

        scheme.id = _schemeId;
        scheme.playersCount = _playersCount;
        scheme.rewards.length = 0;

        for(uint rewardIndex = 0; rewardIndex < _rewards.length; rewardIndex++)
        {
            SchemeReward memory reward;

            reward.place = rewardIndex + 1;
            reward.multiplier = _rewards[rewardIndex];

            scheme.rewards.push(reward);
        }
    }

    /** Set destination wallet. Commission will be sent to this address
    */
    function setDestinationWallet(address payable walletAddress) external
        onlyOwner
    {
        requireNotEmptyAddress(walletAddress);

        _destinationWallet = walletAddress;
    }

    /** Get destination wallet
    */
    function getDestinationWallet() public view returns (address)
    {
        return _destinationWallet;
    }

    /** Get Race bet
    */
    function getBet(uint _raceId) public view returns (uint)
    {
        return _states[_raceId].bet;
    }

    /** Get race players count
    */
    function getPlayersCount(uint _raceId) public view returns (uint)
    {
        return _states[_raceId].assignedPlayersCount;
    }

    /** Get race finished flag
    */
    function isFinished(uint _raceId) public view returns (bool)
    {
        return _states[_raceId].isFinished;
    }

    /** Get race is started flag
    */
    function isStarted(uint _raceId) public view returns (bool)
    {
        return _states[_raceId].isStarted;
    }

    /** Get race is cancelled flag
    */
    function isCancelled(uint _raceId) public view returns (bool)
    {
        return _states[_raceId].isCancelled;
    }

    /** Get race max players count
    */
    function getMaxPlayersCount(uint _raceId) public view returns (uint)
    {
        return _states[_raceId].scheme.playersCount;
    }

    /** Get race reward info for specified reward index
    */
    function getReward(uint _raceId, uint _rewardIndex) public view returns (uint place, uint multiplier)
    {
        Scheme storage scheme = _states[_raceId].scheme;
        place = scheme.rewards[_rewardIndex].place;
        multiplier = scheme.rewards[_rewardIndex].multiplier;
    }

    /** Get scheme players count
    */
    function getSchemePlayersCount(uint _schemeId) public view returns (uint)
    {
        return _schemes[_schemeId].playersCount;
    }

    /** Get scheme reward info for specified reward index
    */
    function getSchemeReward(uint _schemeId, uint _rewardIndex) public view returns (uint place, uint multiplier)
    {
        Scheme storage scheme = _schemes[_schemeId];
        place = scheme.rewards[_rewardIndex].place;
        multiplier = scheme.rewards[_rewardIndex].multiplier;
    }

    /** Modifiers
    */
    modifier validDestinationWallet() {
        requireNotEmptyAddress(_destinationWallet);
        _;
    }

    modifier validRaceId(uint _raceId) {
        State storage state = _states[_raceId];
        require(state.id == _raceId, "Invalid race id was provided");
        _;
    }

    modifier validRacePlayersCount(uint _raceId) {
        State storage state = _states[_raceId];
        require(state.assignedPlayersCount != 0, "There are no players assigned");
        require(state.assignedPlayersCount == state.scheme.playersCount, "Players amount mismatch");
        _;
    }

    modifier whenRaceIsNotCancelled(uint _raceId)
    {
        require(!_states[_raceId].isCancelled, "Race is cancelled");
        _;
    }

    modifier whenRaceIsNotFinished(uint _raceId)
    {
        require(!_states[_raceId].isFinished, "Race has end");
        _;
    }

    modifier whenRaceIsCancelled(uint _raceId)
    {
        require(_states[_raceId].isCancelled, "Race is not cancelled yet");
        _;
    }

    modifier whenRaceIsNotStarted(uint _raceId)
    {
        State storage state = _states[_raceId];
        require(!state.isStarted, "Race already started");
        _;
    }

    modifier whenRaceIsStarted(uint _raceId)
    {
        State storage state = _states[_raceId];
        require(state.isStarted, "Race is not started yet");
        _;
    }
}
